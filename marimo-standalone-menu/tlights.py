import marimo
import sys
sys.path.append("./")

app = marimo.App(width="medium")

@app.cell
def _():
    import marimo as mo
    return (mo,)

@app.cell
def left_menu():
    from common import mainmenu
    nav_menu = mo.sidebar(
        [
            mo.nav_menu(
                orientation = "vertical",
                menu = mainmenu()
                )
        ]
    )
    nav_menu
    return nav_menu

@app.cell
def _(mo):
    mo.md("# Traffic Light Example\n\n## Tutorial text\n\nModify the code below to see the impact on the simulation output.")
    return

@app.cell
def _(mo):
    global code_eg
    try:
        with open("dut_tlights_template.sv","r") as ftemplate:
            initial_code = ftemplate.read()
    except:
        initial_code = "ERROR: CODE TEMPLATE MISSING"
    editor = mo.ui.code_editor(value=initial_code, language="verilog")
    editor
    return editor, initial_code

@app.cell
def _(mo):
    simbutton = mo.ui.run_button(
        label="Run simulation",
    )
    simbutton
    return simbutton

@app.cell
def simulate(mo,editor,simbutton):
    from sootty import WireTrace, Visualizer, Style
    import subprocess
    # don't run the simulation until the button has been pressed:
    mo.stop(not simbutton.value)
    with open("dut_tlights.sv","w") as f:
        f.write(editor.value)
    err = False
    simout = "UNKNOWN ERROR"
    runrtn = subprocess.run(["verilator", "--binary", "--trace", "-Wall", "tb_tlights.sv", "dut_tlights.sv"], capture_output=True, text=True, timeout=10)
    if(runrtn.returncode!=0):
        simout="Compilation ERROR:\n"
        if(runrtn.stderr!=None):
            simout += runrtn.stderr
        simout += f"{simout}\nReturned error code {runrtn.returncode}"
        err = True
    else:
        simout = "Compilation output:"
        if(runrtn.stdout!=None):
            simout += runrtn.stdout
        if(runrtn.stderr!=None):
            simout += runrtn.stderr
        simout += "\n"
    if(not(err)):
        runrtn = subprocess.run(["./obj_dir/Vtb_tlights"], capture_output=True, text=True, timeout=10)
        if(runrtn.returncode!=0):
            simout += f"command returned error code {runrtn.returncode}"
            err = True
        else:
            # HACK: fix some issues in VCD generated by some Verilators:
            vcddata = None
            with open("obj_dir/tb_tlights_trace.vcd", 'r') as vcdfin:
                vcddata = vcdfin.read()
            vcddata = vcddata.replace("$upscope $end","")
            with open("obj_dir/tb_tlights_trace_mod.vcd", 'w') as vcdfout:
                vcdfout.write(vcddata)
            try:
                # Create wiretrace object from vcd file:
                wiretrace = WireTrace.from_vcd("obj_dir/tb_tlights_trace_mod.vcd")
                # Convert wiretrace to svg:
                image = Visualizer(Style.Dark).to_svg(wiretrace, start=0, length=130, wires="clk, rst_n, rag, red, amber, green")
                simout = "<b>Waveform viewer:</b>\n"
                simout += "<svg width=\"800\" height=\"250\">"+image.source+"</svg>"
            except Exception as e:
                simout = "<b>Waveform viewer failed with:</b> "+str(e)+"\n\n"
            simout += "<b>Text output from simulator:</b>\n"
            if(runrtn.stdout!=None):
                simout += runrtn.stdout
            simout += "\n"
    return (simout, )

@app.cell
def myout(mo, simout):
    mo.md(simout.replace("\n","<br>\n"))
    return

@app.cell
def _(mo):
    mo.md(f"## Test Bench Code\n")

@app.cell
def _(mo):
    with open("tb_tlights.sv","r") as ftb:
        verilog = ftb.read()
    mo.ui.code_editor(value=verilog, language="verilog", disabled=True)

if __name__ == "__main__":
    app.run()
